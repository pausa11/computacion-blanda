import os
import pandas as pd
import markdown
import pdfkit
from datetime import datetime

BASE_DIR = "TSP_Experiment"
CSV_DIR = os.path.join(BASE_DIR, "csv")
IMG_DIR = os.path.join(BASE_DIR, "png")
EXPORT_DIR = os.path.join(BASE_DIR, "export")
README_PATH = os.path.join(BASE_DIR, "README.md")
README_PDF_PATH = os.path.join(BASE_DIR, "README.pdf")

os.makedirs(EXPORT_DIR, exist_ok=True)

# Ruta manual al ejecutable wkhtmltopdf (ajusta si es necesario)
WKHTMLTOPDF_PATH = 'C:/Program Files/wkhtmltopdf/bin/wkhtmltopdf.exe'
config = pdfkit.configuration(wkhtmltopdf=WKHTMLTOPDF_PATH)

def resumen_csv(csv_path):
    df = pd.read_csv(csv_path)
    nombre = os.path.basename(csv_path).replace("gridsearch_", "").replace(".csv", "")
    best = df.sort_values("gap_%").iloc[0]
    gap_avg = df["gap_%"].mean()
    t_avg = df["tiempo_segundos"].mean()
    return f"""### üß† {nombre.upper()}
- üìâ GAP promedio general: {gap_avg:.2f}%
- ü•á Mejor GAP alcanzado: {best['gap_%']:.2f}% con par√°metros:
  - n_ants: {best['n_ants']}
  - alpha: {best['alpha']}
  - beta: {best['beta']}
  - ro: {best['ro']}
- ‚è±Ô∏è Tiempo medio de ejecuci√≥n: {t_avg:.2f} segundos

**Recomendaci√≥n:** Usar esta configuraci√≥n balanceada para `{nombre}`.
"""

def generar_readme():
    contenido = [
        "# An√°lisis de ACO sobre Instancias TSPLIB\n",
        "Este informe resume los resultados de ACO con grid search sobre 9 instancias TSPLIB.\n",
        "\n## üìñ Explicaci√≥n de los Par√°metros del Algoritmo ACO\n",
        "En el experimento se ajustaron distintos par√°metros del algoritmo de colonia de hormigas (ACO) para resolver problemas de rutas (TSP). Cada uno de estos par√°metros tiene un efecto directo sobre el comportamiento del algoritmo. A continuaci√≥n se explica qu√© hace cada uno y c√≥mo afect√≥ los resultados observados:\n",

        "\n### üêú n_ants (N√∫mero de hormigas)",
        "**Qu√© significa:** Es la cantidad de soluciones simult√°neas que el algoritmo construye en cada iteraci√≥n.",
        "\n**C√≥mo influye:** M√°s hormigas permiten explorar m√°s caminos posibles, pero tambi√©n aumentan el tiempo de c√≥mputo.",
        "\n**Lo que observamos:**",
        "- En problemas peque√±os, usar pocas hormigas fue suficiente para encontrar buenas rutas.",
        "- En problemas m√°s grandes, aumentar este valor ayud√≥ a mejorar la calidad de las soluciones, aunque con mayor tiempo de ejecuci√≥n.",

        "\n### üî∫ alpha (Importancia de la feromona)",
        "**Qu√© significa:** Controla cu√°nto influye el rastro de feromonas (experiencia previa) en la elecci√≥n de caminos.",
        "\n**C√≥mo influye:** Valores altos hacen que las hormigas se gu√≠en m√°s por los caminos ya marcados por otras, lo que puede llevar a soluciones estables pero tambi√©n a estancarse.",
        "\n**Lo que observamos:**",
        "- Un valor medio (alpha = 1.0) fue generalmente el m√°s efectivo.",
        "- Valores bajos (alpha = 0.5) dieron buenos resultados en problemas peque√±os, al favorecer la exploraci√≥n.",

        "\n### üëÄ beta (Importancia de la visibilidad)",
        "**Qu√© significa:** Mide cu√°nto influye la distancia entre ciudades en la decisi√≥n de las hormigas. A mayor beta, m√°s peso se da a las ciudades m√°s cercanas.",
        "\n**C√≥mo influye:** Valores altos favorecen decisiones 'cortoplacistas' (ir al nodo m√°s cercano), mientras que valores bajos permiten rutas m√°s globales.",
        "\n**Lo que observamos:**",
        "- En la mayor√≠a de las instancias, un valor alto (beta = 2.0) mejor√≥ los resultados, ya que dirigi√≥ a las hormigas por rutas m√°s cortas de forma m√°s efectiva.",

        "\n### üíß ro (Tasa de evaporaci√≥n)",
        "**Qu√© significa:** Define qu√© tan r√°pido se 'evapora' la feromona acumulada en los caminos.",
        "\n**C√≥mo influye:** Un valor bajo permite que las feromonas duren m√°s tiempo, ayudando a mantener el conocimiento colectivo. Un valor alto promueve olvidar caminos r√°pidamente y explorar m√°s.",
        "\n**Lo que observamos:**",
        "- Una evaporaci√≥n moderada (ro = 0.3) fue √∫til para balancear exploraci√≥n y explotaci√≥n.",
        "- En instancias grandes, una evaporaci√≥n baja (ro = 0.1) ayud√≥ a mantener las rutas buenas por m√°s tiempo y evit√≥ perder el progreso.",

        "\n### üß† Conclusi√≥n general",
        "El √©xito del algoritmo ACO depende de encontrar un equilibrio entre explorar nuevas rutas (exploraci√≥n) y reforzar las mejores encontradas (explotaci√≥n). Ajustar los par√°metros correctamente puede marcar la diferencia entre una soluci√≥n mediocre y una ruta casi √≥ptima. Los resultados muestran que no hay una √∫nica combinaci√≥n ganadora, pero ciertos patrones se repiten:",
        "- beta alto suele ser beneficioso.",
        "- alpha medio o bajo ayuda a explorar mejor en problemas peque√±os.",
        "- ro bajo mantiene la estabilidad en problemas grandes.",
        "- n_ants debe adaptarse al tama√±o del problema.\n",

        "\n## üìå Conclusiones y Recomendaciones por Instancia\n"
    ]

    for archivo in sorted(os.listdir(CSV_DIR)):
        if archivo.endswith(".csv"):
            csv_path = os.path.join(CSV_DIR, archivo)
            contenido.append(resumen_csv(csv_path))
            nombre = archivo.replace("gridsearch_", "").replace(".csv", "")
            for param in ["n_ants", "alpha", "beta", "ro"]:
                grafico_path = f"grafico_gap_vs_{param}_{nombre}.png"
                if os.path.exists(os.path.join(IMG_DIR, grafico_path)):
                    contenido.append(f"\n![GAP vs {param} - {nombre}](TSP_Experiment\png/{grafico_path})\n")

    with open(README_PATH, "w", encoding="utf-8") as f:
        f.write("\n".join(contenido))

    # Convertir a PDF con HTML completo y UTF-8
    try:
        print("\nüñ®Ô∏è Generando PDF desde README.md...")
        html_body = markdown.markdown("\n".join(contenido), extensions=['extra'])
        html = f"""
        <!DOCTYPE html>
        <html lang='es'>
        <head>
            <meta charset='UTF-8'>
            <title>Informe ACO</title>
        </head>
        <body>
        {html_body}
        </body>
        </html>
        """
        with open("temp_readme.html", "w", encoding="utf-8") as html_file:
            html_file.write(html)
        pdfkit.from_file(
            "temp_readme.html",
            README_PDF_PATH,
            configuration=config,
            options={"enable-local-file-access": ""}
        )
        os.remove("temp_readme.html")
        print(f"‚úÖ PDF generado correctamente en: {README_PDF_PATH}")

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
        export_name = f"README_{timestamp}.pdf"
        export_path = os.path.join(EXPORT_DIR, export_name)
        os.replace(README_PDF_PATH, export_path)
        print(f"üìÅ Copia exportada a: {export_path}")

    except Exception as e:
        print("‚ö†Ô∏è Error al generar PDF:", e)

if __name__ == "__main__":
    generar_readme()
    print(f"README.md generado en: {README_PATH}")
